generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Lấy URL database từ biến môi trường
}

/// Model `User` đại diện cho người dùng ứng dụng.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[] /// Một user có thể có nhiều project
  // tasks    Task[] /// Một user có thể có nhiều task
}

/// Model `Project` dùng để nhóm các công việc lại.
model Project {
  id        String   @id @default(cuid())
  name      String
  color     String? /// Mã màu để hiển thị trên UI, giúp phân biệt các project
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Mối quan hệ: Một Project thuộc về một User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // tasks Task[] /// Một project có thể chứa nhiều task
}

/// Model `Task` chứa tất cả thông tin liên quan đến một công việc cần làm.
model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      Status  @default(TODO) /// Trạng thái hiện tại của task, sử dụng Enum để đảm bảo tính nhất quán

  dueDate DateTime? /// Hạn chót của công việc. Đây là yêu cầu "Time/date handling"

  // Các trường để phục vụ tính năng thông minh và phân tích
  estimatedTime Int? /// Thời gian ước tính để hoàn thành (tính bằng phút)
  actualTime    Int? /// Thời gian thực tế đã bỏ ra (tính bằng phút)
  completedAt   DateTime? /// Thời điểm công việc được đánh dấu là hoàn thành

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // // Mối quan hệ: Một Task thuộc về một User
  // userId String
  // user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  // // Mối quan hệ: Một Task có thể thuộc về một Project (không bắt buộc)
  // projectId String?
  // project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

/// Enum `Status` định nghĩa các trạng thái có thể có của một Task.
enum Status {
  TODO
  IN_PROGRESS
  DONE
}
